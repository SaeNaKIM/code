!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BIG_ENDIAN_ORDER	EndianSwap.h	/^    BIG_ENDIAN_ORDER,$/;"	e	enum:EEndian
ByteBuffer	ByteBuffer.cpp	/^ByteBuffer::ByteBuffer(ByteBuffer const& rhs)$/;"	f	class:utility::hex::ByteBuffer	signature:(ByteBuffer const& rhs)
ByteBuffer	ByteBuffer.cpp	/^ByteBuffer::ByteBuffer(ByteBuffer&& rhs)$/;"	f	class:utility::hex::ByteBuffer	signature:(ByteBuffer&& rhs)
ByteBuffer	ByteBuffer.cpp	/^ByteBuffer::ByteBuffer(size_t size)$/;"	f	class:utility::hex::ByteBuffer	signature:(size_t size)
ByteBuffer	ByteBuffer.cpp	/^ByteBuffer::ByteBuffer(uint8_t* buffer, size_t sz)$/;"	f	class:utility::hex::ByteBuffer	signature:(uint8_t* buffer, size_t sz)
ByteBuffer	ByteBuffer.h	/^    ByteBuffer(ByteBuffer const& rhs);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(ByteBuffer const& rhs)
ByteBuffer	ByteBuffer.h	/^    ByteBuffer(ByteBuffer&& rhs);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(ByteBuffer&& rhs)
ByteBuffer	ByteBuffer.h	/^    ByteBuffer(size_t size=0);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(size_t size=0)
ByteBuffer	ByteBuffer.h	/^    ByteBuffer(uint8_t* buffer, size_t s);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint8_t* buffer, size_t s)
ByteBuffer	ByteBuffer.h	/^class ByteBuffer$/;"	c	namespace:utility::hex
CURVE25519_DONNA_H_ACRJFPL7	curve25519-donna.h	/^#define CURVE25519_DONNA_H_ACRJFPL7$/;"	d
EEndian	EndianSwap.h	/^enum EEndian$/;"	g
F	curve25519-donna.cpp	/^#define F(/;"	d	file:
F	curve25519-donna.cpp	/^#undef F$/;"	d	file:
HOST_ENDIAN_ORDER	EndianSwap.h	/^    HOST_ENDIAN_ORDER = LITTLE_ENDIAN_ORDER$/;"	e	enum:EEndian
LITTLE_ENDIAN_ORDER	EndianSwap.h	/^    LITTLE_ENDIAN_ORDER,$/;"	e	enum:EEndian
append	ByteBuffer.h	/^    ByteBuffer& append(ByteBuffer& b);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(ByteBuffer& b)
append	ByteBuffer.h	/^    ByteBuffer& append(uint8_t b);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint8_t b)
append	ByteBuffer.h	/^    ByteBuffer& append(uint8_t* b, size_t sz);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint8_t* b, size_t sz)
beg	ByteBuffer.h	/^    enum { beg = 0, cur = 1, end = 2 };$/;"	e	enum:utility::hex::ByteBuffer::__anon1
buffer_t	ByteBuffer.h	/^    typedef std::vector<uint8_t> buffer_t;$/;"	t	class:utility::hex::ByteBuffer	access:public
c_str	ByteBuffer.h	/^    char const* c_str();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
capacity	ByteBuffer.h	/^    int64_t capacity()         { return int64_t(m_buffer.capacity()); }$/;"	f	class:utility::hex::ByteBuffer	access:public	signature:()
cmult	curve25519-donna.cpp	/^cmult(felem *resultx, felem *resultz, const u8 *n, const felem *q) {$/;"	f	file:	signature:(felem *resultx, felem *resultz, const u8 *n, const felem *q)
crecip	curve25519-donna.cpp	/^crecip(felem *out, const felem *z) {$/;"	f	file:	signature:(felem *out, const felem *z)
cur	ByteBuffer.h	/^    enum { beg = 0, cur = 1, end = 2 };$/;"	e	enum:utility::hex::ByteBuffer::__anon1
curve25519_donna	curve25519-donna.cpp	/^void curve25519_donna(u8 *mypublic, const u8 *secret, const u8 *basepoint)$/;"	f	signature:(u8 *mypublic, const u8 *secret, const u8 *basepoint)
curve25519_donna	curve25519-donna.h	/^void curve25519_donna(u8 *mypublic, const u8 *secret, const u8 *basepoint);$/;"	p	signature:(u8 *mypublic, const u8 *secret, const u8 *basepoint)
empty	ByteBuffer.h	/^    bool    empty();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
end	ByteBuffer.h	/^    enum { beg = 0, cur = 1, end = 2 };$/;"	e	enum:utility::hex::ByteBuffer::__anon1
endian_swap_bytes	EndianSwap.h	/^inline T endian_swap_bytes(T value)$/;"	f	signature:(T value)
fcontract	curve25519-donna.cpp	/^fcontract(u8 *output, felem *input) {$/;"	f	file:	signature:(u8 *output, felem *input)
fdifference	curve25519-donna.cpp	/^static void fdifference(felem *output, const felem *in)$/;"	f	file:	signature:(felem *output, const felem *in)
felem	curve25519-donna.h	/^typedef int64_t felem;$/;"	t
fexpand	curve25519-donna.cpp	/^fexpand(felem *output, const u8 *input) {$/;"	f	file:	signature:(felem *output, const u8 *input)
flip	ByteBuffer.h	/^    ByteBuffer& flip();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
fmonty	curve25519-donna.cpp	/^static void fmonty(felem *x2, felem *z2,  \/* output 2Q *\/$/;"	f	file:	signature:(felem *x2, felem *z2, felem *x3, felem *z3, felem *x, felem *z, felem *xprime, felem *zprime, const felem *qmqp )
fmul	curve25519-donna.cpp	/^fmul(felem *output, const felem *in, const felem *in2) {$/;"	f	file:	signature:(felem *output, const felem *in, const felem *in2)
fproduct	curve25519-donna.cpp	/^static void fproduct(felem *output, const felem *in2, const felem *in) {$/;"	f	file:	signature:(felem *output, const felem *in2, const felem *in)
freduce_coefficients	curve25519-donna.cpp	/^static void freduce_coefficients(felem *output) {$/;"	f	file:	signature:(felem *output)
freduce_degree	curve25519-donna.cpp	/^static void freduce_degree(felem *output) {$/;"	f	file:	signature:(felem *output)
from_hexcode	ByteBuffer.h	/^    static ByteBuffer from_hexcode(std::string const&, bool=false);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(std::string const&, bool=false)
fscalar_product	curve25519-donna.cpp	/^static void fscalar_product(felem *output, const felem *in, const felem scalar) {$/;"	f	file:	signature:(felem *output, const felem *in, const felem scalar)
fsquare	curve25519-donna.cpp	/^fsquare(felem *output, const felem *in) {$/;"	f	file:	signature:(felem *output, const felem *in)
fsquare_inner	curve25519-donna.cpp	/^static void fsquare_inner(felem *output, const felem *in) {$/;"	f	file:	signature:(felem *output, const felem *in)
fsum	curve25519-donna.cpp	/^static void fsum(felem *output, const felem *in)$/;"	f	file:	signature:(felem *output, const felem *in)
get_binary	ByteBuffer.h	/^    uint8_t* get_binary(uint32_t size);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t size)
get_buffer	ByteBuffer.h	/^    buffer_t&   get_buffer();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_buffer	ByteBuffer.h	/^    buffer_t&   get_buffer(uint32_t size);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t size)
get_hex_string	ByteBuffer.h	/^    std::string get_hex_string(uint32_t size);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t size)
get_int	ByteBuffer.h	/^    IntType get_int(size_t byte_count)$/;"	f	class:utility::hex::ByteBuffer	access:public	signature:(size_t byte_count)
get_int1	ByteBuffer.h	/^    int8_t   get_int1();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_int2_be	ByteBuffer.h	/^    int16_t  get_int2_be();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_int2_le	ByteBuffer.cpp	/^int16_t ByteBuffer::get_int2_le()$/;"	f	class:utility::hex::ByteBuffer	signature:()
get_int2_le	ByteBuffer.h	/^    int16_t  get_int2_le();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_int2_net	ByteBuffer.h	/^    int16_t     get_int2_net();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_int4_be	ByteBuffer.h	/^    int32_t  get_int4_be();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_int4_le	ByteBuffer.h	/^    int32_t  get_int4_le();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_int4_net	ByteBuffer.h	/^    int32_t     get_int4_net();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_int8_be	ByteBuffer.h	/^    int64_t  get_int8_be();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_string	ByteBuffer.h	/^    std::string get_string();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_string	ByteBuffer.h	/^    std::string get_string(size_t size);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(size_t size)
get_uint1	ByteBuffer.h	/^    uint8_t  get_uint1();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_uint2_be	ByteBuffer.h	/^    uint16_t get_uint2_be();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_uint2_le	ByteBuffer.cpp	/^uint16_t ByteBuffer::get_uint2_le()$/;"	f	class:utility::hex::ByteBuffer	signature:()
get_uint2_le	ByteBuffer.h	/^    uint16_t get_uint2_le();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_uint2_net	ByteBuffer.h	/^    uint16_t    get_uint2_net();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_uint3_be	ByteBuffer.h	/^    uint32_t get_uint3_be();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_uint4_be	ByteBuffer.h	/^    uint32_t get_uint4_be();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_uint4_le	ByteBuffer.cpp	/^uint32_t ByteBuffer::get_uint4_le()$/;"	f	class:utility::hex::ByteBuffer	signature:()
get_uint4_le	ByteBuffer.h	/^    uint32_t get_uint4_le();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_uint4_net	ByteBuffer.h	/^    uint32_t    get_uint4_net();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_uint8_be	ByteBuffer.h	/^    uint64_t get_uint8_be();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
get_uint8_le	ByteBuffer.h	/^    uint64_t get_uint8_le();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
has_remaining	ByteBuffer.h	/^    bool    has_remaining();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
hex	ByteBuffer.cpp	/^namespace utility { namespace hex {    $/;"	n	namespace:utility	file:
hex	ByteBuffer.h	/^namespace utility { namespace hex {$/;"	n	namespace:utility
load	ByteBuffer.h	/^    void        load(buffer_t& buffer);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(buffer_t& buffer)
m_buffer	ByteBuffer.h	/^    buffer_t m_buffer;$/;"	m	class:utility::hex::ByteBuffer	access:protected
m_offset	ByteBuffer.h	/^    uint32_t m_offset;$/;"	m	class:utility::hex::ByteBuffer	access:protected
main	main.cpp	/^int main(int argc, char const* argv[])$/;"	f	signature:(int argc, char const* argv[])
new	ByteBuffer.cpp	/^#define new /;"	d	file:
offset	ByteBuffer.h	/^    ByteBuffer& offset(uint32_t o);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t o)
offset	ByteBuffer.h	/^    int64_t     offset();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
operator =	ByteBuffer.cpp	/^ByteBuffer& ByteBuffer::operator=(ByteBuffer const& rhs)$/;"	f	class:utility::hex::ByteBuffer	signature:(ByteBuffer const& rhs)
operator =	ByteBuffer.h	/^    ByteBuffer& operator=(ByteBuffer const& rhs);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(ByteBuffer const& rhs)
operator ==	ByteBuffer.cpp	/^bool ByteBuffer::operator==(ByteBuffer const& rhs) const$/;"	f	class:utility::hex::ByteBuffer	signature:(ByteBuffer const& rhs) const
operator ==	ByteBuffer.h	/^    bool operator == (ByteBuffer const& rhs) const;$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(ByteBuffer const& rhs) const
operator char const*	ByteBuffer.h	/^    operator char const*()     { return (char const*)m_buffer.data(); }$/;"	f	class:utility::hex::ByteBuffer	access:public	signature:()
operator uint8_t*	ByteBuffer.h	/^    operator uint8_t*()        { return m_buffer.data(); }$/;"	f	class:utility::hex::ByteBuffer	access:public	signature:()
operator void const*	ByteBuffer.h	/^    operator void const*()     { return (void const*)m_buffer.data(); }$/;"	f	class:utility::hex::ByteBuffer	access:public	signature:()
peek1_at	ByteBuffer.h	/^    uint8_t     peek1_at(uint32_t offset, int start=cur);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t offset, int start=cur)
remaining	ByteBuffer.h	/^    int64_t remaining();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
reserve	ByteBuffer.h	/^    size_t  reserve(size_t);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(size_t)
reset	ByteBuffer.h	/^    ByteBuffer& reset();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
set_binary	ByteBuffer.h	/^    ByteBuffer& set_binary(uint8_t* src, uint32_t size);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint8_t* src, uint32_t size)
set_string	ByteBuffer.h	/^    ByteBuffer& set_string(char const* src);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(char const* src)
set_uint1	ByteBuffer.h	/^    ByteBuffer& set_uint1(uint8_t);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint8_t)
set_uint2_net	ByteBuffer.h	/^    ByteBuffer& set_uint2_net(uint16_t);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint16_t)
set_uint4_net	ByteBuffer.h	/^    ByteBuffer& set_uint4_net(uint32_t);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t)
size	ByteBuffer.h	/^    int64_t size()             { return int64_t(m_buffer.size());     }$/;"	f	class:utility::hex::ByteBuffer	access:public	signature:()
size_type	ByteBuffer.h	/^    typedef buffer_t::size_type size_type;$/;"	t	class:utility::hex::ByteBuffer	access:public
skip	ByteBuffer.h	/^    ByteBuffer& skip(uint32_t offset);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t offset)
slice	ByteBuffer.h	/^    ByteBuffer  slice(uint32_t from, uint32_t to);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t from, uint32_t to)
swap_bytes	EndianSwap.h	/^inline T swap_bytes(T value)$/;"	f	signature:(T value)
u8	curve25519-donna.h	/^typedef uint8_t u8;$/;"	t
unget	ByteBuffer.h	/^    ByteBuffer& unget(uint32_t offset);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t offset)
utility	ByteBuffer.cpp	/^namespace utility { namespace hex {    $/;"	n	file:
utility	ByteBuffer.h	/^namespace utility { namespace hex {$/;"	n
utility::hex	ByteBuffer.cpp	/^namespace utility { namespace hex {    $/;"	n	namespace:utility	file:
utility::hex	ByteBuffer.h	/^namespace utility { namespace hex {$/;"	n	namespace:utility
utility::hex::ByteBuffer	ByteBuffer.h	/^class ByteBuffer$/;"	c	namespace:utility::hex
utility::hex::ByteBuffer::ByteBuffer	ByteBuffer.cpp	/^ByteBuffer::ByteBuffer(ByteBuffer const& rhs)$/;"	f	class:utility::hex::ByteBuffer	signature:(ByteBuffer const& rhs)
utility::hex::ByteBuffer::ByteBuffer	ByteBuffer.cpp	/^ByteBuffer::ByteBuffer(ByteBuffer&& rhs)$/;"	f	class:utility::hex::ByteBuffer	signature:(ByteBuffer&& rhs)
utility::hex::ByteBuffer::ByteBuffer	ByteBuffer.cpp	/^ByteBuffer::ByteBuffer(size_t size)$/;"	f	class:utility::hex::ByteBuffer	signature:(size_t size)
utility::hex::ByteBuffer::ByteBuffer	ByteBuffer.cpp	/^ByteBuffer::ByteBuffer(uint8_t* buffer, size_t sz)$/;"	f	class:utility::hex::ByteBuffer	signature:(uint8_t* buffer, size_t sz)
utility::hex::ByteBuffer::ByteBuffer	ByteBuffer.h	/^    ByteBuffer(ByteBuffer const& rhs);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(ByteBuffer const& rhs)
utility::hex::ByteBuffer::ByteBuffer	ByteBuffer.h	/^    ByteBuffer(ByteBuffer&& rhs);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(ByteBuffer&& rhs)
utility::hex::ByteBuffer::ByteBuffer	ByteBuffer.h	/^    ByteBuffer(size_t size=0);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(size_t size=0)
utility::hex::ByteBuffer::ByteBuffer	ByteBuffer.h	/^    ByteBuffer(uint8_t* buffer, size_t s);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint8_t* buffer, size_t s)
utility::hex::ByteBuffer::append	ByteBuffer.h	/^    ByteBuffer& append(ByteBuffer& b);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(ByteBuffer& b)
utility::hex::ByteBuffer::append	ByteBuffer.h	/^    ByteBuffer& append(uint8_t b);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint8_t b)
utility::hex::ByteBuffer::append	ByteBuffer.h	/^    ByteBuffer& append(uint8_t* b, size_t sz);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint8_t* b, size_t sz)
utility::hex::ByteBuffer::beg	ByteBuffer.h	/^    enum { beg = 0, cur = 1, end = 2 };$/;"	e	enum:utility::hex::ByteBuffer::__anon1
utility::hex::ByteBuffer::buffer_t	ByteBuffer.h	/^    typedef std::vector<uint8_t> buffer_t;$/;"	t	class:utility::hex::ByteBuffer	access:public
utility::hex::ByteBuffer::c_str	ByteBuffer.h	/^    char const* c_str();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::capacity	ByteBuffer.h	/^    int64_t capacity()         { return int64_t(m_buffer.capacity()); }$/;"	f	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::cur	ByteBuffer.h	/^    enum { beg = 0, cur = 1, end = 2 };$/;"	e	enum:utility::hex::ByteBuffer::__anon1
utility::hex::ByteBuffer::empty	ByteBuffer.h	/^    bool    empty();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::end	ByteBuffer.h	/^    enum { beg = 0, cur = 1, end = 2 };$/;"	e	enum:utility::hex::ByteBuffer::__anon1
utility::hex::ByteBuffer::flip	ByteBuffer.h	/^    ByteBuffer& flip();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::from_hexcode	ByteBuffer.h	/^    static ByteBuffer from_hexcode(std::string const&, bool=false);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(std::string const&, bool=false)
utility::hex::ByteBuffer::get_binary	ByteBuffer.h	/^    uint8_t* get_binary(uint32_t size);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t size)
utility::hex::ByteBuffer::get_buffer	ByteBuffer.h	/^    buffer_t&   get_buffer();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_buffer	ByteBuffer.h	/^    buffer_t&   get_buffer(uint32_t size);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t size)
utility::hex::ByteBuffer::get_hex_string	ByteBuffer.h	/^    std::string get_hex_string(uint32_t size);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t size)
utility::hex::ByteBuffer::get_int	ByteBuffer.h	/^    IntType get_int(size_t byte_count)$/;"	f	class:utility::hex::ByteBuffer	access:public	signature:(size_t byte_count)
utility::hex::ByteBuffer::get_int1	ByteBuffer.h	/^    int8_t   get_int1();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_int2_be	ByteBuffer.h	/^    int16_t  get_int2_be();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_int2_le	ByteBuffer.cpp	/^int16_t ByteBuffer::get_int2_le()$/;"	f	class:utility::hex::ByteBuffer	signature:()
utility::hex::ByteBuffer::get_int2_le	ByteBuffer.h	/^    int16_t  get_int2_le();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_int2_net	ByteBuffer.h	/^    int16_t     get_int2_net();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_int4_be	ByteBuffer.h	/^    int32_t  get_int4_be();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_int4_le	ByteBuffer.h	/^    int32_t  get_int4_le();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_int4_net	ByteBuffer.h	/^    int32_t     get_int4_net();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_int8_be	ByteBuffer.h	/^    int64_t  get_int8_be();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_string	ByteBuffer.h	/^    std::string get_string();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_string	ByteBuffer.h	/^    std::string get_string(size_t size);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(size_t size)
utility::hex::ByteBuffer::get_uint1	ByteBuffer.h	/^    uint8_t  get_uint1();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_uint2_be	ByteBuffer.h	/^    uint16_t get_uint2_be();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_uint2_le	ByteBuffer.cpp	/^uint16_t ByteBuffer::get_uint2_le()$/;"	f	class:utility::hex::ByteBuffer	signature:()
utility::hex::ByteBuffer::get_uint2_le	ByteBuffer.h	/^    uint16_t get_uint2_le();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_uint2_net	ByteBuffer.h	/^    uint16_t    get_uint2_net();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_uint3_be	ByteBuffer.h	/^    uint32_t get_uint3_be();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_uint4_be	ByteBuffer.h	/^    uint32_t get_uint4_be();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_uint4_le	ByteBuffer.cpp	/^uint32_t ByteBuffer::get_uint4_le()$/;"	f	class:utility::hex::ByteBuffer	signature:()
utility::hex::ByteBuffer::get_uint4_le	ByteBuffer.h	/^    uint32_t get_uint4_le();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_uint4_net	ByteBuffer.h	/^    uint32_t    get_uint4_net();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_uint8_be	ByteBuffer.h	/^    uint64_t get_uint8_be();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::get_uint8_le	ByteBuffer.h	/^    uint64_t get_uint8_le();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::has_remaining	ByteBuffer.h	/^    bool    has_remaining();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::load	ByteBuffer.h	/^    void        load(buffer_t& buffer);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(buffer_t& buffer)
utility::hex::ByteBuffer::m_buffer	ByteBuffer.h	/^    buffer_t m_buffer;$/;"	m	class:utility::hex::ByteBuffer	access:protected
utility::hex::ByteBuffer::m_offset	ByteBuffer.h	/^    uint32_t m_offset;$/;"	m	class:utility::hex::ByteBuffer	access:protected
utility::hex::ByteBuffer::offset	ByteBuffer.h	/^    ByteBuffer& offset(uint32_t o);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t o)
utility::hex::ByteBuffer::offset	ByteBuffer.h	/^    int64_t     offset();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::operator =	ByteBuffer.cpp	/^ByteBuffer& ByteBuffer::operator=(ByteBuffer const& rhs)$/;"	f	class:utility::hex::ByteBuffer	signature:(ByteBuffer const& rhs)
utility::hex::ByteBuffer::operator =	ByteBuffer.h	/^    ByteBuffer& operator=(ByteBuffer const& rhs);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(ByteBuffer const& rhs)
utility::hex::ByteBuffer::operator ==	ByteBuffer.cpp	/^bool ByteBuffer::operator==(ByteBuffer const& rhs) const$/;"	f	class:utility::hex::ByteBuffer	signature:(ByteBuffer const& rhs) const
utility::hex::ByteBuffer::operator ==	ByteBuffer.h	/^    bool operator == (ByteBuffer const& rhs) const;$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(ByteBuffer const& rhs) const
utility::hex::ByteBuffer::operator char const*	ByteBuffer.h	/^    operator char const*()     { return (char const*)m_buffer.data(); }$/;"	f	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::operator uint8_t*	ByteBuffer.h	/^    operator uint8_t*()        { return m_buffer.data(); }$/;"	f	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::operator void const*	ByteBuffer.h	/^    operator void const*()     { return (void const*)m_buffer.data(); }$/;"	f	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::peek1_at	ByteBuffer.h	/^    uint8_t     peek1_at(uint32_t offset, int start=cur);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t offset, int start=cur)
utility::hex::ByteBuffer::remaining	ByteBuffer.h	/^    int64_t remaining();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::reserve	ByteBuffer.h	/^    size_t  reserve(size_t);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(size_t)
utility::hex::ByteBuffer::reset	ByteBuffer.h	/^    ByteBuffer& reset();$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::set_binary	ByteBuffer.h	/^    ByteBuffer& set_binary(uint8_t* src, uint32_t size);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint8_t* src, uint32_t size)
utility::hex::ByteBuffer::set_string	ByteBuffer.h	/^    ByteBuffer& set_string(char const* src);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(char const* src)
utility::hex::ByteBuffer::set_uint1	ByteBuffer.h	/^    ByteBuffer& set_uint1(uint8_t);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint8_t)
utility::hex::ByteBuffer::set_uint2_net	ByteBuffer.h	/^    ByteBuffer& set_uint2_net(uint16_t);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint16_t)
utility::hex::ByteBuffer::set_uint4_net	ByteBuffer.h	/^    ByteBuffer& set_uint4_net(uint32_t);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t)
utility::hex::ByteBuffer::size	ByteBuffer.h	/^    int64_t size()             { return int64_t(m_buffer.size());     }$/;"	f	class:utility::hex::ByteBuffer	access:public	signature:()
utility::hex::ByteBuffer::size_type	ByteBuffer.h	/^    typedef buffer_t::size_type size_type;$/;"	t	class:utility::hex::ByteBuffer	access:public
utility::hex::ByteBuffer::skip	ByteBuffer.h	/^    ByteBuffer& skip(uint32_t offset);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t offset)
utility::hex::ByteBuffer::slice	ByteBuffer.h	/^    ByteBuffer  slice(uint32_t from, uint32_t to);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t from, uint32_t to)
utility::hex::ByteBuffer::unget	ByteBuffer.h	/^    ByteBuffer& unget(uint32_t offset);$/;"	p	class:utility::hex::ByteBuffer	access:public	signature:(uint32_t offset)
utility::hex::ByteBuffer::~ByteBuffer	ByteBuffer.h	/^    ~ByteBuffer() {}$/;"	f	class:utility::hex::ByteBuffer	access:public	signature:()
~ByteBuffer	ByteBuffer.h	/^    ~ByteBuffer() {}$/;"	f	class:utility::hex::ByteBuffer	access:public	signature:()
