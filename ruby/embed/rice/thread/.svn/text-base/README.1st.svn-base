YARV Thread Desgin
==================

model 1: Userlevel Thread
  Same as traditional ruby thread.

model 2: Native Thread with Global VM lock
  Using pthread (or Windows thread) and Ruby threads run concurrent.

model 3: Native Thread with fine grain lock
  Using pthread and Ruby threads run concurrent or parallel.

----------------------------------------------------------------------

model 2:
  A thread has mutex (GVL: Global VM Lock or Giant VM Lock) can run.
  When thread scheduling, running thread release GVL.  If running thread
  try blocking operation, this thread must release GVL and another
  thread can continue this flow.  After blocking operation, thread
  must check interrupt (RUBY_VM_CHECK_INTS).

  Every VM can run parallel.

  Ruby threads are scheduled by OS thread scheduler.

----------------------------------------------------------------------

model 3:
  Every threads run concurrent or parallel and to access shared object
  exclusive access control is needed.  For example, to access String
  object or Array object, fine grain lock must be locked every time.


rb_thread_blocking_region - permit concurrent/parallel execution.

This function does:
  (1) release GVL.
      Other Ruby threads may run in parallel.
  (2) call func with data1.
  (3) aquire GVL.
      Other Ruby threads can not run in parallel any more.

  If another thread interrupts this thread (Thread#kill, signal deliverly,
  VM-shutdown request, and so on), `ubf()' is called (`ubf()' means
  "un-blocking function").  `ubf()' should interrupt `func()' execution.

  There are built-in ubfs and you can specify these ubfs.
  However, we can not guarantee our built-in ubfs interrupt
  your `func()' correctly.  Be careful to use rb_thread_blocking_region().

    * RUBY_UBF_IO: ubf for IO operation
    * RUBY_UBF_PROCESS: ubf for process operation

  NOTE: You can not execute most of Ruby C API and touch Ruby objects
        in `func()' and `ubf()' because current thread doesn't acquire
        GVL (cause synchronization problem).  If you need to do it,
        read source code of C APIs and confirm by yourself.

  NOTE: In short, this API is difficult to use safely.  I recommend you
        use other ways if you have.  We lack experiences to use this API.
        Please report your problem related on it.

  Safe C API:
    * rb_thread_interrupted() - check interrupt flag
    * ruby_xalloc(), ruby_xrealloc(), ruby_xfree() - 
        if they called without GVL, acquire GVL automatically.


//////////////////////////////////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////////////////////////////////
#define BLOCKING_REGION(func, arg) \
  (long)rb_thread_blocking_region((func), (arg), RUBY_UBF_IO, 0)

struct getaddrinfo_arg
{
  const char *node;
  const char *service;
  const struct addrinfo *hints;
  struct addrinfo **res;
};

static VALUE
nogvl_getaddrinfo(void *arg)
{
  struct getaddrinfo_arg *ptr = arg;
  return getaddrinfo(ptr->node, ptr->service,
                     ptr->hints, ptr->res);
}

static int
rb_getaddrinfo(const char *node, const char *service,
               const struct addrinfo *hints,
               struct addrinfo **res)
{
  struct getaddrinfo_arg arg;
  int ret;
  arg.node = node;
  arg.service = service;
  arg.hints = hints;
  arg.res = res;
  ret = BLOCKING_REGION(nogvl_getaddrinfo, &arg);
  return ret;
}

//////////////////////////////////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////////////////////////////////
