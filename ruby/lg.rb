#!/usr/bin/env ruby

require 'openssl'
require "base64"
require "digest/sha2"

password = "1111"
salt     = [0xE5, 0xF0, 0x63, 0x6A, 0xF7, 0x1D, 0x1B, 0x17, 
            0x4F, 0xB9, 0xD7, 0x03, 0x43, 0x85, 0x93, 0x5D].pack('c*')

p "password : #{password}, size: #{password.size}"
p "salt     : #{salt}, size: #{salt.size}"

key = OpenSSL::PKCS5.pbkdf2_hmac_sha1(password, salt,
      2000,     # iteratoin
      32)       # key_len(bytes)

p "key size : #{key.size}"
p "key      : #{key}"

d = OpenSSL::Cipher.new("AES-128-CBC")
d.decrypt
d.padding = 0
d.iv      = key[16..-1]
d.key     = key[0..15]

ciphered  = [0xB3, 0xB6, 0xF1, 0x58, 0x29, 0x95, 0xD5, 0xD1, 
             0x6C, 0xE7, 0x00, 0x6D, 0x3B, 0x2B, 0x52, 0x8E, 
             0x10, 0xC8, 0xE8, 0xAC, 0x50, 0x47, 0xA8, 0x5A, 
             0xA3, 0x9E, 0xFD, 0xB3, 0x23, 0xB8, 0xF3, 0xCC].pack("c*")

master_key = d.update(ciphered) << d.final
p "master (key, size) : (#{master_key}, #{master_key.size})"

e = OpenSSL::Cipher.new("AES-256-ECB")
e.encrypt

sha256 = OpenSSL::Digest::SHA256.new
e.key  = sha256.digest(master_key)
sector_no = ([0]*32).pack("c*")
encrypted = e.update(sector_no) << e.final

p "IV       : #{encrypted}"

f = OpenSSL::Cipher.new("AES-256-CBC")
f.decrypt
f.padding = 0
f.iv  = encrypted
f.key = master_key 

data = [
  0xE5, 0xA2, 0x2D, 0xB7, 0xA4, 0x56, 0x3A, 0xF2, 0x93, 0x37, 0x55, 0xA2, 0x4E, 0x37, 0x73, 0x22,
  0x98, 0x27, 0xA7, 0xB5, 0x29, 0xB2, 0x1B, 0x96, 0x78, 0x37, 0x7D, 0x1F, 0xB2, 0xA6, 0x5D, 0xBD,
  0x94, 0x74, 0xC6, 0x10, 0x47, 0x4C, 0x78, 0x45, 0xED, 0xB3, 0x47, 0x54, 0x4E, 0x0A, 0xF6, 0x29,
  0x3D, 0x17, 0x3B, 0x2E, 0x54, 0xBB, 0xF8, 0xFB, 0x57, 0x0A, 0x23, 0xB8, 0x52, 0x7B, 0x00, 0x0B,
  0x10, 0x47, 0x28, 0xB3, 0x1C, 0xBC, 0x11, 0x00, 0x70, 0x60, 0x2F, 0x80, 0x71, 0x62, 0xCD, 0xE6,
  0xAB, 0x3E, 0xD2, 0xC2, 0x4F, 0x92, 0xE4, 0xA9, 0xE6, 0x3E, 0x63, 0xBB, 0x0D, 0xCE, 0x64, 0x07,
  0x23, 0x6A, 0x17, 0x39, 0x4E, 0xB6, 0xC8, 0x2D, 0x13, 0xC5, 0xA5, 0x43, 0x6A, 0x0C, 0xEE, 0xEE,
  0xFF, 0x61, 0x5F, 0x48, 0x68, 0x00, 0xA0, 0x1F, 0xFB, 0x2C, 0x93, 0x7A, 0xF5, 0x45, 0x70, 0x99,
  0x0C, 0x1A, 0x37, 0xB5, 0xF3, 0x94, 0x44, 0x4D, 0x4C, 0xF1, 0xA0, 0xB1, 0x40, 0x36, 0xE3, 0xF7,
  0x0B, 0x89, 0x64, 0x93, 0xBC, 0xF1, 0x61, 0x34, 0x67, 0xC7, 0xD6, 0xAB, 0x30, 0x9E, 0x90, 0x82,
  0x4E, 0xE7, 0x02, 0xFF, 0x47, 0xC2, 0xFA, 0x71, 0xBB, 0xDA, 0xEC, 0x18, 0xEE, 0x65, 0x34, 0xD7,
  0x76, 0x79, 0xBA, 0x53, 0x52, 0xF4, 0x36, 0x4F, 0x8C, 0xE7, 0xB4, 0x90, 0x5B, 0xC1, 0x06, 0x25,
  0x85, 0x5D, 0x94, 0x2B, 0x2C, 0x4F, 0xAF, 0xB2, 0x77, 0x54, 0xBD, 0x64, 0xCB, 0x90, 0xB0, 0x5B,
  0x68, 0xC3, 0x12, 0x13, 0x11, 0xF5, 0x15, 0x35, 0x35, 0x4A, 0x72, 0x31, 0x5C, 0x2B, 0x2C, 0x29,
  0x36, 0x90, 0xB2, 0x5C, 0x68, 0x3E, 0x79, 0x33, 0xEC, 0x31, 0x43, 0x20, 0x81, 0x39, 0x08, 0x9E,
  0xBB, 0x0B, 0xC3, 0x60, 0xBB, 0xA2, 0x8C, 0xEE, 0xA3, 0xAA, 0x4C, 0x5B, 0x36, 0x57, 0xA4, 0x0D,
  0xBC, 0xA7, 0x4B, 0xBD, 0x7A, 0x13, 0xAD, 0xE7, 0x18, 0xC6, 0xC6, 0x74, 0x34, 0x69, 0xFE, 0x80,
  0xC1, 0x12, 0x23, 0x24, 0x77, 0xFA, 0xC1, 0xC8, 0x22, 0xE6, 0x1E, 0x2F, 0xEA, 0x82, 0x55, 0xC9,
  0x61, 0x94, 0xB0, 0x16, 0xDB, 0xED, 0x3B, 0x34, 0x3F, 0xD7, 0x9B, 0x3B, 0xFF, 0x53, 0xD0, 0x74,
  0x21, 0x93, 0x99, 0xD7, 0x12, 0x8A, 0x99, 0x4A, 0x9E, 0x3D, 0xF8, 0xF9, 0xBC, 0x3B, 0x73, 0x35,
  0x08, 0xCA, 0xC9, 0x29, 0x62, 0xC4, 0x69, 0x11, 0xF7, 0xB8, 0xEB, 0xE7, 0x7A, 0x01, 0xA8, 0xA8,
  0x72, 0xD0, 0x2D, 0x4E, 0x6C, 0x9C, 0xF5, 0x86, 0xCC, 0x16, 0x32, 0x19, 0x81, 0xD5, 0x43, 0xB6,
  0xD6, 0x05, 0xE0, 0xE3, 0x1A, 0x39, 0x76, 0xAD, 0x8C, 0x93, 0x96, 0x1C, 0xFC, 0xB8, 0x03, 0x0B,
  0xC0, 0x16, 0x7F, 0xAB, 0x94, 0xEA, 0x16, 0x01, 0x47, 0xC3, 0x88, 0x64, 0xF5, 0x1A, 0xAC, 0x91,
  0x88, 0x0F, 0xE6, 0xF1, 0x9C, 0xF2, 0x3D, 0x4C, 0xCB, 0xB9, 0x60, 0x1A, 0x38, 0x04, 0x48, 0x13,
  0x20, 0x0A, 0xD5, 0xAE, 0xE1, 0x68, 0x79, 0x56, 0xB3, 0x06, 0x4A, 0x15, 0x3F, 0x66, 0x8C, 0x7A,
  0x8D, 0xFA, 0x07, 0x69, 0xEA, 0xB4, 0x80, 0x61, 0x07, 0xC6, 0x72, 0x7C, 0x08, 0x4E, 0xC7, 0xF0,
  0xB7, 0x71, 0xD4, 0x7A, 0x48, 0x4D, 0xA9, 0x1E, 0xE0, 0x03, 0x25, 0x68, 0x9F, 0xC9, 0x9D, 0x73,
  0x55, 0x50, 0xD5, 0x98, 0x70, 0x63, 0xE9, 0xC9, 0x30, 0x84, 0xA0, 0x6A, 0x9F, 0x4F, 0xF3, 0x22,
  0x66, 0xAA, 0x98, 0xAC, 0x3A, 0xD5, 0x45, 0x4D, 0x57, 0xAF, 0xCE, 0xBA, 0x0B, 0x7A, 0xBA, 0x57,
  0x5B, 0x79, 0x81, 0xF9, 0x84, 0x12, 0xB4, 0x80, 0xB9, 0xBD, 0xDE, 0x04, 0x7D, 0x60, 0xCB, 0x0B,
  0xF8, 0xF5, 0xE1, 0xCF, 0xDA, 0x47, 0x61, 0x37, 0x92, 0xD8, 0xB7, 0x26, 0x06, 0x6C, 0xD6, 0xBE].pack("c*")

cleared_text = f.update(data) << f.final
p "decrypted text: #{cleared_text}"

