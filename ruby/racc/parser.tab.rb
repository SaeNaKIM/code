#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'
class CalcParser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     7,     3,     6,     4,     9,     7,    12,     6,     3,     3,
     4,     4,     3,     5,     4,     7 ]

racc_action_check = [
     8,     3,     8,     3,     5,     2,     8,     2,     0,     7,
     0,     7,     6,     1,     6,    10 ]

racc_action_pointer = [
     0,    13,     2,    -7,   nil,     4,     4,     1,    -3,   nil,
    12,   nil,   nil ]

racc_action_default = [
    -6,    -6,    -1,    -6,    -5,    -6,    -6,    -6,    -6,    13,
    -2,    -3,    -4 ]

racc_goto_table = [
     2,     1,   nil,     8,   nil,   nil,    10,    11 ]

racc_goto_check = [
     2,     1,   nil,     2,   nil,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 12, :_reduce_1,
  3, 13, :_reduce_none,
  3, 13, :_reduce_none,
  3, 13, :_reduce_none,
  1, 13, :_reduce_none ]

racc_reduce_n = 6

racc_shift_n = 13

racc_token_table = {
  false => 0,
  :error => 1,
  "++" => 2,
  "*" => 3,
  "/" => 4,
  "+" => 5,
  "-" => 6,
  "=" => 7,
  "(" => 8,
  ")" => 9,
  :NUMber => 10 }

racc_nt_base = 11

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"++\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"=\"",
  "\"(\"",
  "\")\"",
  "NUMber",
  "$start",
  "target",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y.rb', 8)
  def _reduce_1(val, _values, result)
     print val[0] 
    result
  end
.,.,

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class CalcParser
