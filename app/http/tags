!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CallLog	driver.cpp	/^  CallLog(ptree& tree)$/;"	f	class:CallLog	access:public	signature:(ptree& tree)
CallLog	driver.cpp	/^class CallLog$/;"	c	file:
CallLog::CallLog	driver.cpp	/^  CallLog(ptree& tree)$/;"	f	class:CallLog	access:public	signature:(ptree& tree)
CallLog::m_address	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:CallLog	file:	access:private
CallLog::m_call_duration	driver.cpp	/^  string m_timestamp, m_call_duration, m_read_state;$/;"	m	class:CallLog	file:	access:private
CallLog::m_dir_id	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:CallLog	file:	access:private
CallLog::m_msg_id	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:CallLog	file:	access:private
CallLog::m_name	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:CallLog	file:	access:private
CallLog::m_phone_type	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:CallLog	file:	access:private
CallLog::m_read_state	driver.cpp	/^  string m_timestamp, m_call_duration, m_read_state;$/;"	m	class:CallLog	file:	access:private
CallLog::m_timestamp	driver.cpp	/^  string m_timestamp, m_call_duration, m_read_state;$/;"	m	class:CallLog	file:	access:private
CallLog::m_type	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:CallLog	file:	access:private
CallLog::query	driver.cpp	/^  static string query(int index)$/;"	f	class:CallLog	access:public	signature:(int index)
CallLog::to_s	driver.cpp	/^  string to_s()$/;"	f	class:CallLog	access:public	signature:()
CallLogs	driver.cpp	/^typedef vector<boost::shared_ptr<CallLog> > CallLogs;$/;"	t	file:
HTTPClient	http_client.cpp	/^HTTPClient::HTTPClient(char const* host, char const* port, int timeout)$/;"	f	class:HTTPClient	signature:(char const* host, char const* port, int timeout)
HTTPClient	http_client.h	/^  HTTPClient(char const* host, char const* port="8080", int timeout=50);$/;"	p	class:HTTPClient	access:public	signature:(char const* host, char const* port=Ó, int timeout=50)
HTTPClient	http_client.h	/^class HTTPClient$/;"	c
HTTPClient::HTTPClient	http_client.cpp	/^HTTPClient::HTTPClient(char const* host, char const* port, int timeout)$/;"	f	class:HTTPClient	signature:(char const* host, char const* port, int timeout)
HTTPClient::HTTPClient	http_client.h	/^  HTTPClient(char const* host, char const* port="8080", int timeout=50);$/;"	p	class:HTTPClient	access:public	signature:(char const* host, char const* port=Ó, int timeout=50)
HTTPClient::get	http_client.cpp	/^string HTTPClient::get(char const* query)$/;"	f	class:HTTPClient	signature:(char const* query)
HTTPClient::get	http_client.h	/^  std::string get(char const* query);$/;"	p	class:HTTPClient	access:public	signature:(char const* query)
HTTPClient::get_raw	http_client.cpp	/^string HTTPClient::get_raw(char const* query)$/;"	f	class:HTTPClient	signature:(char const* query)
HTTPClient::get_raw	http_client.h	/^  std::string get_raw(char const* query);$/;"	p	class:HTTPClient	access:public	signature:(char const* query)
HTTPClient::last_status	http_client.cpp	/^uint32_t HTTPClient::last_status()$/;"	f	class:HTTPClient	signature:()
HTTPClient::last_status	http_client.h	/^  uint32_t last_status();$/;"	p	class:HTTPClient	access:public	signature:()
HTTPClient::m_spHttp	http_client.h	/^  boost::shared_ptr<HTTPClientImpl> m_spHttp;$/;"	m	class:HTTPClient	access:private
HTTPClientImpl	http_client.cpp	/^  HTTPClientImpl(char const* host, char const* port="8080", int timeout=5);$/;"	p	class:HTTPClientImpl	file:	access:public	signature:(char const* host, char const* port=Ó, int timeout=5)
HTTPClientImpl	http_client.cpp	/^HTTPClientImpl::HTTPClientImpl(char const* host, char const* port, int timeout)$/;"	f	class:HTTPClientImpl	signature:(char const* host, char const* port, int timeout)
HTTPClientImpl	http_client.cpp	/^class HTTPClientImpl$/;"	c	file:
HTTPClientImpl::HTTPClientImpl	http_client.cpp	/^  HTTPClientImpl(char const* host, char const* port="8080", int timeout=5);$/;"	p	class:HTTPClientImpl	file:	access:public	signature:(char const* host, char const* port=Ó, int timeout=5)
HTTPClientImpl::HTTPClientImpl	http_client.cpp	/^HTTPClientImpl::HTTPClientImpl(char const* host, char const* port, int timeout)$/;"	f	class:HTTPClientImpl	signature:(char const* host, char const* port, int timeout)
HTTPClientImpl::get	http_client.cpp	/^  string get(char const* query);$/;"	p	class:HTTPClientImpl	file:	access:public	signature:(char const* query)
HTTPClientImpl::get	http_client.cpp	/^string HTTPClientImpl::get(char const* query)$/;"	f	class:HTTPClientImpl	signature:(char const* query)
HTTPClientImpl::get_raw	http_client.cpp	/^  string get_raw(char const* query);$/;"	p	class:HTTPClientImpl	file:	access:public	signature:(char const* query)
HTTPClientImpl::get_raw	http_client.cpp	/^string HTTPClientImpl::get_raw(char const* query)$/;"	f	class:HTTPClientImpl	signature:(char const* query)
HTTPClientImpl::handshake	http_client.cpp	/^  bool handshake(char const* query);$/;"	p	class:HTTPClientImpl	file:	access:private	signature:(char const* query)
HTTPClientImpl::handshake	http_client.cpp	/^bool HTTPClientImpl::handshake(char const* query)$/;"	f	class:HTTPClientImpl	signature:(char const* query)
HTTPClientImpl::last_status	http_client.cpp	/^  uint32_t last_status();$/;"	p	class:HTTPClientImpl	file:	access:public	signature:()
HTTPClientImpl::last_status	http_client.cpp	/^uint32_t HTTPClientImpl::last_status()$/;"	f	class:HTTPClientImpl	signature:()
HTTPClientImpl::m_chunk_based	http_client.cpp	/^  bool m_chunk_based;$/;"	m	class:HTTPClientImpl	file:	access:private
HTTPClientImpl::m_host	http_client.cpp	/^  string m_host;$/;"	m	class:HTTPClientImpl	file:	access:private
HTTPClientImpl::m_last_status	http_client.cpp	/^  uint32_t m_last_status;$/;"	m	class:HTTPClientImpl	file:	access:private
HTTPClientImpl::m_port	http_client.cpp	/^  string m_port;$/;"	m	class:HTTPClientImpl	file:	access:private
HTTPClientImpl::m_size	http_client.cpp	/^  uint32_t m_size;$/;"	m	class:HTTPClientImpl	file:	access:private
HTTPClientImpl::m_stream	http_client.cpp	/^  boost::asio::ip::tcp::iostream m_stream;$/;"	m	class:HTTPClientImpl	file:	access:private
HTTPClientImpl::m_timeout	http_client.cpp	/^  int  m_timeout;$/;"	m	class:HTTPClientImpl	file:	access:private
HTTPClientImpl::parse_header	http_client.cpp	/^  bool parse_header();$/;"	p	class:HTTPClientImpl	file:	access:private	signature:()
HTTPClientImpl::parse_header	http_client.cpp	/^bool HTTPClientImpl::parse_header()$/;"	f	class:HTTPClientImpl	signature:()
HTTPClientImpl::~HTTPClientImpl	http_client.cpp	/^  ~HTTPClientImpl();$/;"	p	class:HTTPClientImpl	file:	access:public	signature:()
HTTPClientImpl::~HTTPClientImpl	http_client.cpp	/^HTTPClientImpl:: ~HTTPClientImpl()$/;"	f	class:HTTPClientImpl	signature:()
MobileInbox	driver.cpp	/^  MobileInbox(ptree& tree)$/;"	f	class:MobileInbox	access:public	signature:(ptree& tree)
MobileInbox	driver.cpp	/^class MobileInbox$/;"	c	file:
MobileInbox::MobileInbox	driver.cpp	/^  MobileInbox(ptree& tree)$/;"	f	class:MobileInbox	access:public	signature:(ptree& tree)
MobileInbox::m_address	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:MobileInbox	file:	access:private
MobileInbox::m_call_duration	driver.cpp	/^  string m_timestamp, m_message_body, m_call_duration, m_read_state;$/;"	m	class:MobileInbox	file:	access:private
MobileInbox::m_dir_id	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:MobileInbox	file:	access:private
MobileInbox::m_message_body	driver.cpp	/^  string m_timestamp, m_message_body, m_call_duration, m_read_state;$/;"	m	class:MobileInbox	file:	access:private
MobileInbox::m_msg_id	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:MobileInbox	file:	access:private
MobileInbox::m_name	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:MobileInbox	file:	access:private
MobileInbox::m_phone_type	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:MobileInbox	file:	access:private
MobileInbox::m_read_state	driver.cpp	/^  string m_timestamp, m_message_body, m_call_duration, m_read_state;$/;"	m	class:MobileInbox	file:	access:private
MobileInbox::m_timestamp	driver.cpp	/^  string m_timestamp, m_message_body, m_call_duration, m_read_state;$/;"	m	class:MobileInbox	file:	access:private
MobileInbox::m_type	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:MobileInbox	file:	access:private
MobileInbox::query	driver.cpp	/^  static string query(uint32_t index)$/;"	f	class:MobileInbox	access:public	signature:(uint32_t index)
MobileInbox::to_s	driver.cpp	/^  string to_s()$/;"	f	class:MobileInbox	access:public	signature:()
MobileInboxes	driver.cpp	/^typedef vector<boost::shared_ptr<MobileInbox> > MobileInboxes;$/;"	t	file:
Motoroi	driver.cpp	/^  Motoroi(char const* host, char const* port="8080", int time=10)$/;"	f	class:Motoroi	access:public	signature:(char const* host, char const* port=Ó, int time=10)
Motoroi	driver.cpp	/^class Motoroi$/;"	c	file:
Motoroi	motoroi.rb	/^class Motoroi$/;"	c
Motoroi::Motoroi	driver.cpp	/^  Motoroi(char const* host, char const* port="8080", int time=10)$/;"	f	class:Motoroi	access:public	signature:(char const* host, char const* port=Ó, int time=10)
Motoroi::m_http	driver.cpp	/^  HTTPClient m_http;$/;"	m	class:Motoroi	file:	access:private
Motoroi::prepare_calllog	driver.cpp	/^  CallLogs prepare_calllog()$/;"	f	class:Motoroi	access:public	signature:()
Motoroi::prepare_mobile_inbox	driver.cpp	/^  MobileInboxes prepare_mobile_inbox()$/;"	f	class:Motoroi	access:public	signature:()
Motoroi::prepare_pictures	driver.cpp	/^  Pictures prepare_pictures()$/;"	f	class:Motoroi	access:public	signature:()
Motoroi::prepare_sms	driver.cpp	/^  SMSs prepare_sms()$/;"	f	class:Motoroi	access:public	signature:()
Motoroi::query_data	driver.cpp	/^  pair<string, uint32_t> query_data(string const& query, string const& root, string const& count, $/;"	f	class:Motoroi	file:	access:private	signature:(string const& query, string const& root, string const& count, vector<boost::shared_ptr<Item> >& c)
Motoroi::~Motoroi	driver.cpp	/^  ~Motoroi()$/;"	f	class:Motoroi	access:public	signature:()
Picture	driver.cpp	/^  Picture(ptree& tree)$/;"	f	class:Picture	access:public	signature:(ptree& tree)
Picture	driver.cpp	/^class Picture$/;"	c	file:
Picture	motoroi.rb	/^class Picture$/;"	c
Picture::Picture	driver.cpp	/^  Picture(ptree& tree)$/;"	f	class:Picture	access:public	signature:(ptree& tree)
Picture::assign	driver.cpp	/^  void assign(string& contents)$/;"	f	class:Picture	access:public	signature:(string& contents)
Picture::location	driver.cpp	/^  string location()$/;"	f	class:Picture	access:public	signature:()
Picture::m_album_name	driver.cpp	/^  string m_album_name, m_width, m_height;$/;"	m	class:Picture	file:	access:private
Picture::m_contents	driver.cpp	/^  string m_contents;$/;"	m	class:Picture	file:	access:private
Picture::m_height	driver.cpp	/^  string m_album_name, m_width, m_height;$/;"	m	class:Picture	file:	access:private
Picture::m_id	driver.cpp	/^  string m_id, m_name, m_loc, m_tloc, m_size, m_last_modified;$/;"	m	class:Picture	file:	access:private
Picture::m_last_modified	driver.cpp	/^  string m_id, m_name, m_loc, m_tloc, m_size, m_last_modified;$/;"	m	class:Picture	file:	access:private
Picture::m_loc	driver.cpp	/^  string m_id, m_name, m_loc, m_tloc, m_size, m_last_modified;$/;"	m	class:Picture	file:	access:private
Picture::m_name	driver.cpp	/^  string m_id, m_name, m_loc, m_tloc, m_size, m_last_modified;$/;"	m	class:Picture	file:	access:private
Picture::m_size	driver.cpp	/^  string m_id, m_name, m_loc, m_tloc, m_size, m_last_modified;$/;"	m	class:Picture	file:	access:private
Picture::m_tloc	driver.cpp	/^  string m_id, m_name, m_loc, m_tloc, m_size, m_last_modified;$/;"	m	class:Picture	file:	access:private
Picture::m_width	driver.cpp	/^  string m_album_name, m_width, m_height;$/;"	m	class:Picture	file:	access:private
Picture::query	driver.cpp	/^  static string query(uint32_t index)$/;"	f	class:Picture	access:public	signature:(uint32_t index)
Picture::save_to	driver.cpp	/^  void save_to(string const& path)$/;"	f	class:Picture	access:public	signature:(string const& path)
Pictures	driver.cpp	/^typedef vector<boost::shared_ptr<Picture> > Pictures;$/;"	t	file:
SMS	driver.cpp	/^  SMS(ptree const& tree)$/;"	f	class:SMS	access:public	signature:(ptree const& tree)
SMS	driver.cpp	/^class SMS$/;"	c	file:
SMS	motoroi.rb	/^class SMS$/;"	c
SMS::SMS	driver.cpp	/^  SMS(ptree const& tree)$/;"	f	class:SMS	access:public	signature:(ptree const& tree)
SMS::m_address	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:SMS	file:	access:private
SMS::m_dir_id	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:SMS	file:	access:private
SMS::m_message_body	driver.cpp	/^  string m_timestamp, m_message_body, m_read_state;$/;"	m	class:SMS	file:	access:private
SMS::m_msg_id	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:SMS	file:	access:private
SMS::m_name	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:SMS	file:	access:private
SMS::m_phone_type	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:SMS	file:	access:private
SMS::m_read_state	driver.cpp	/^  string m_timestamp, m_message_body, m_read_state;$/;"	m	class:SMS	file:	access:private
SMS::m_timestamp	driver.cpp	/^  string m_timestamp, m_message_body, m_read_state;$/;"	m	class:SMS	file:	access:private
SMS::m_type	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:SMS	file:	access:private
SMS::query	driver.cpp	/^  static string query(int index)$/;"	f	class:SMS	access:public	signature:(int index)
SMS::to_s	driver.cpp	/^  string to_s()$/;"	f	class:SMS	access:public	signature:()
SMSs	driver.cpp	/^typedef vector<boost::shared_ptr<SMS> > SMSs;$/;"	t	file:
assign	driver.cpp	/^  void assign(string& contents)$/;"	f	class:Picture	access:public	signature:(string& contents)
assign	motoroi.rb	/^  def assign contents$/;"	f	class:Picture
get	http_client.cpp	/^  string get(char const* query);$/;"	p	class:HTTPClientImpl	file:	access:public	signature:(char const* query)
get	http_client.cpp	/^string HTTPClient::get(char const* query)$/;"	f	class:HTTPClient	signature:(char const* query)
get	http_client.cpp	/^string HTTPClientImpl::get(char const* query)$/;"	f	class:HTTPClientImpl	signature:(char const* query)
get	http_client.h	/^  std::string get(char const* query);$/;"	p	class:HTTPClient	access:public	signature:(char const* query)
get_raw	http_client.cpp	/^  string get_raw(char const* query);$/;"	p	class:HTTPClientImpl	file:	access:public	signature:(char const* query)
get_raw	http_client.cpp	/^string HTTPClient::get_raw(char const* query)$/;"	f	class:HTTPClient	signature:(char const* query)
get_raw	http_client.cpp	/^string HTTPClientImpl::get_raw(char const* query)$/;"	f	class:HTTPClientImpl	signature:(char const* query)
get_raw	http_client.h	/^  std::string get_raw(char const* query);$/;"	p	class:HTTPClient	access:public	signature:(char const* query)
handshake	http_client.cpp	/^  bool handshake(char const* query);$/;"	p	class:HTTPClientImpl	file:	access:private	signature:(char const* query)
handshake	http_client.cpp	/^bool HTTPClientImpl::handshake(char const* query)$/;"	f	class:HTTPClientImpl	signature:(char const* query)
initialize	motoroi.rb	/^  def initialize ip, port=8080 $/;"	f	class:Motoroi
initialize	motoroi.rb	/^  def initialize pic $/;"	f	class:Picture
initialize	motoroi.rb	/^  def initialize(sms)$/;"	f	class:SMS
last_status	http_client.cpp	/^  uint32_t last_status();$/;"	p	class:HTTPClientImpl	file:	access:public	signature:()
last_status	http_client.cpp	/^uint32_t HTTPClient::last_status()$/;"	f	class:HTTPClient	signature:()
last_status	http_client.cpp	/^uint32_t HTTPClientImpl::last_status()$/;"	f	class:HTTPClientImpl	signature:()
last_status	http_client.h	/^  uint32_t last_status();$/;"	p	class:HTTPClient	access:public	signature:()
location	driver.cpp	/^  string location()$/;"	f	class:Picture	access:public	signature:()
m_address	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:CallLog	file:	access:private
m_address	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:MobileInbox	file:	access:private
m_address	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:SMS	file:	access:private
m_album_name	driver.cpp	/^  string m_album_name, m_width, m_height;$/;"	m	class:Picture	file:	access:private
m_call_duration	driver.cpp	/^  string m_timestamp, m_call_duration, m_read_state;$/;"	m	class:CallLog	file:	access:private
m_call_duration	driver.cpp	/^  string m_timestamp, m_message_body, m_call_duration, m_read_state;$/;"	m	class:MobileInbox	file:	access:private
m_chunk_based	http_client.cpp	/^  bool m_chunk_based;$/;"	m	class:HTTPClientImpl	file:	access:private
m_contents	driver.cpp	/^  string m_contents;$/;"	m	class:Picture	file:	access:private
m_dir_id	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:CallLog	file:	access:private
m_dir_id	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:MobileInbox	file:	access:private
m_dir_id	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:SMS	file:	access:private
m_height	driver.cpp	/^  string m_album_name, m_width, m_height;$/;"	m	class:Picture	file:	access:private
m_host	http_client.cpp	/^  string m_host;$/;"	m	class:HTTPClientImpl	file:	access:private
m_http	driver.cpp	/^  HTTPClient m_http;$/;"	m	class:Motoroi	file:	access:private
m_id	driver.cpp	/^  string m_id, m_name, m_loc, m_tloc, m_size, m_last_modified;$/;"	m	class:Picture	file:	access:private
m_last_modified	driver.cpp	/^  string m_id, m_name, m_loc, m_tloc, m_size, m_last_modified;$/;"	m	class:Picture	file:	access:private
m_last_status	http_client.cpp	/^  uint32_t m_last_status;$/;"	m	class:HTTPClientImpl	file:	access:private
m_loc	driver.cpp	/^  string m_id, m_name, m_loc, m_tloc, m_size, m_last_modified;$/;"	m	class:Picture	file:	access:private
m_message_body	driver.cpp	/^  string m_timestamp, m_message_body, m_call_duration, m_read_state;$/;"	m	class:MobileInbox	file:	access:private
m_message_body	driver.cpp	/^  string m_timestamp, m_message_body, m_read_state;$/;"	m	class:SMS	file:	access:private
m_msg_id	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:CallLog	file:	access:private
m_msg_id	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:MobileInbox	file:	access:private
m_msg_id	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:SMS	file:	access:private
m_name	driver.cpp	/^  string m_id, m_name, m_loc, m_tloc, m_size, m_last_modified;$/;"	m	class:Picture	file:	access:private
m_name	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:CallLog	file:	access:private
m_name	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:MobileInbox	file:	access:private
m_name	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:SMS	file:	access:private
m_phone_type	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:CallLog	file:	access:private
m_phone_type	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:MobileInbox	file:	access:private
m_phone_type	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:SMS	file:	access:private
m_port	http_client.cpp	/^  string m_port;$/;"	m	class:HTTPClientImpl	file:	access:private
m_read_state	driver.cpp	/^  string m_timestamp, m_call_duration, m_read_state;$/;"	m	class:CallLog	file:	access:private
m_read_state	driver.cpp	/^  string m_timestamp, m_message_body, m_call_duration, m_read_state;$/;"	m	class:MobileInbox	file:	access:private
m_read_state	driver.cpp	/^  string m_timestamp, m_message_body, m_read_state;$/;"	m	class:SMS	file:	access:private
m_size	driver.cpp	/^  string m_id, m_name, m_loc, m_tloc, m_size, m_last_modified;$/;"	m	class:Picture	file:	access:private
m_size	http_client.cpp	/^  uint32_t m_size;$/;"	m	class:HTTPClientImpl	file:	access:private
m_spHttp	http_client.h	/^  boost::shared_ptr<HTTPClientImpl> m_spHttp;$/;"	m	class:HTTPClient	access:private
m_stream	http_client.cpp	/^  boost::asio::ip::tcp::iostream m_stream;$/;"	m	class:HTTPClientImpl	file:	access:private
m_timeout	http_client.cpp	/^  int  m_timeout;$/;"	m	class:HTTPClientImpl	file:	access:private
m_timestamp	driver.cpp	/^  string m_timestamp, m_call_duration, m_read_state;$/;"	m	class:CallLog	file:	access:private
m_timestamp	driver.cpp	/^  string m_timestamp, m_message_body, m_call_duration, m_read_state;$/;"	m	class:MobileInbox	file:	access:private
m_timestamp	driver.cpp	/^  string m_timestamp, m_message_body, m_read_state;$/;"	m	class:SMS	file:	access:private
m_tloc	driver.cpp	/^  string m_id, m_name, m_loc, m_tloc, m_size, m_last_modified;$/;"	m	class:Picture	file:	access:private
m_type	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:CallLog	file:	access:private
m_type	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:MobileInbox	file:	access:private
m_type	driver.cpp	/^  string m_type, m_msg_id, m_name, m_address, m_phone_type, m_dir_id;$/;"	m	class:SMS	file:	access:private
m_width	driver.cpp	/^  string m_album_name, m_width, m_height;$/;"	m	class:Picture	file:	access:private
main	driver.cpp	/^int main(int argc, char const* argv[])$/;"	f	signature:(int argc, char const* argv[])
parse_header	http_client.cpp	/^  bool parse_header();$/;"	p	class:HTTPClientImpl	file:	access:private	signature:()
parse_header	http_client.cpp	/^bool HTTPClientImpl::parse_header()$/;"	f	class:HTTPClientImpl	signature:()
prepare_calllog	driver.cpp	/^  CallLogs prepare_calllog()$/;"	f	class:Motoroi	access:public	signature:()
prepare_messages	motoroi.rb	/^  def prepare_messages$/;"	f	class:Motoroi
prepare_mobile_inbox	driver.cpp	/^  MobileInboxes prepare_mobile_inbox()$/;"	f	class:Motoroi	access:public	signature:()
prepare_pictures	driver.cpp	/^  Pictures prepare_pictures()$/;"	f	class:Motoroi	access:public	signature:()
prepare_pictures	motoroi.rb	/^  def prepare_pictures$/;"	f	class:Motoroi
prepare_sms	driver.cpp	/^  SMSs prepare_sms()$/;"	f	class:Motoroi	access:public	signature:()
query	driver.cpp	/^  static string query(int index)$/;"	f	class:CallLog	access:public	signature:(int index)
query	driver.cpp	/^  static string query(int index)$/;"	f	class:SMS	access:public	signature:(int index)
query	driver.cpp	/^  static string query(uint32_t index)$/;"	f	class:MobileInbox	access:public	signature:(uint32_t index)
query	driver.cpp	/^  static string query(uint32_t index)$/;"	f	class:Picture	access:public	signature:(uint32_t index)
query_data	driver.cpp	/^  pair<string, uint32_t> query_data(string const& query, string const& root, string const& count, $/;"	f	class:Motoroi	file:	access:private	signature:(string const& query, string const& root, string const& count, vector<boost::shared_ptr<Item> >& c)
save_to	driver.cpp	/^  void save_to(string const& path)$/;"	f	class:Picture	access:public	signature:(string const& path)
save_to	motoroi.rb	/^  def save_to path$/;"	f	class:Picture
to_s	driver.cpp	/^  string to_s()$/;"	f	class:CallLog	access:public	signature:()
to_s	driver.cpp	/^  string to_s()$/;"	f	class:MobileInbox	access:public	signature:()
to_s	driver.cpp	/^  string to_s()$/;"	f	class:SMS	access:public	signature:()
to_s	motoroi.rb	/^  def to_s$/;"	f	class:Picture
to_s	motoroi.rb	/^  def to_s$/;"	f	class:SMS
~HTTPClientImpl	http_client.cpp	/^  ~HTTPClientImpl();$/;"	p	class:HTTPClientImpl	file:	access:public	signature:()
~HTTPClientImpl	http_client.cpp	/^HTTPClientImpl:: ~HTTPClientImpl()$/;"	f	class:HTTPClientImpl	signature:()
~Motoroi	driver.cpp	/^  ~Motoroi()$/;"	f	class:Motoroi	access:public	signature:()
